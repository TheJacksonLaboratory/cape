sample_link <- paste0(haplo.base, gsub(".html", "", sample_links[i]), "-snp-report.txt")
sample_link
for(i in 1:length(sample_links)){
sample_page <- paste0(haplo.base, sample_links[i])#
	sample_link <- paste0(haplo.base, gsub(".html", "", sample_links[i]), "-snp-report.txt")#
	split_sample  <- strsplit(sample.table[i,2], "\n")[[1]]#
	sample_name <- head(split_sample, 1)#
	sample_id <- gsub(")", "", gsub("(", "", str_trim(tail(split_sample, 1)), fixed = TRUE), fixed = TRUE)#
	dest_file <- paste0("~/Desktop/", sample_name, "_", sample_id, ".txt")#
	download.file(sample_link, sample_page)#
}
warnings()
i = 1
sample_page <- paste0(haplo.base, sample_links[i])
sample_page
sample_link <- paste0(haplo.base, gsub(".html", "", sample_links[i]), "-snp-report.txt")
sample_link
"https://haploqa.jax.org/sample/654a749e183b6a244dd2d921-snp-report.txt"
sample_link
split_sample  <- strsplit(sample.table[i,2], "\n")[[1]]
split_sample
sample_name <- head(split_sample, 1)
sample_id <- gsub(")", "", gsub("(", "", str_trim(tail(split_sample, 1)), fixed = TRUE), fixed = TRUE)
dest_file <- paste0("~/Desktop/", sample_name, "_", sample_id, ".txt")
dest_file
download.file(sample_link, sample_page)
test <- download.file("https://haploqa.jax.org/sample/654a749e183b6a244dd2d921-snp-report.txt","~/Desktop/test.txt")
"https://haploqa.jax.org/sample/654a749e183b6a244dd2d921-snp-report.txt"
sample_link
sample_page
download.file(sample_link, dest_file)
for(i in 1:length(sample_links)){
sample_page <- paste0(haplo.base, sample_links[i])#
	sample_link <- paste0(haplo.base, gsub(".html", "", sample_links[i]), "-snp-report.txt")#
	split_sample  <- strsplit(sample.table[i,2], "\n")[[1]]#
	sample_name <- head(split_sample, 1)#
	sample_id <- gsub(")", "", gsub("(", "", str_trim(tail(split_sample, 1)), fixed = TRUE), fixed = TRUE)#
	dest_file <- paste0("~/Desktop/", sample_name, "_", sample_id, ".txt")#
	download.file(sample_link, dest_file)#
}
??readHTMLTable
library(qtl2)
page(calc_kinship)
page(calc_genoprobs)
page(calc_genoprob)
library(qtl2)#
grav2 <- read_cross2("~/my_data/grav2.yaml")
grav2 <- read_cross2("https://kbroman.org/qtl2/assets/sampledata/grav2/grav2.zip")
str(grav2)
iron <- read_cross2( system.file("extdata", "iron.zip", package="qtl2") )
map <- insert_pseudomarkers(iron$gmap, step=1)
?system.file()
pr <- calc_genoprob(iron, map, error_prob=0.002)
str(pr)
str(pr[[1]])
head(pr[[1]][,,1])
str(iron)
str(iron$geno)
str(iron$geno[[1]])
head(iron$geno[[1]])
apr <- genoprob_to_alleleprob(pr)
str(apr)
str(pr)
system.file("extdata", "grav2.zip", package="qtl2")
?fisher.test
test <- read.csv("~/Desktop/ingredients_2023-12-30 20 11 23.csv")
test
test[which(test == ".")] <- 9
test <- as.matrix(read.csv("~/Desktop/ingredients_2023-12-30 20 11 23.csv"))
test[which(test == ".")] <- 0
test[which(test == "X")] <- 1
library(pheatmap)
as.numeric(test)
test
test <- as.matrix(read.csv("~/Desktop/ingredients_2023-12-30 20 11 23.csv", row.names = 1))
test
test <- as.matrix(read.csv("~/Desktop/ingredients_2023-12-30 20 11 23.csv", row.names = 1))
test[which(test == "X")] <- 1
test[which(test == ".")] <- 0
test
num.test <- apply(test, 2, as.numeric)
library(pheatmap)
pheatmap(num.test)
source('~/Documents/git_repositories/useful_r_code/plot.decomp.R', chdir = TRUE)
plot.decomp(num.test, label.points = TRUE)
num.test
plot.decomp(t(num.test), label.points = TRUE)
rownames(num.test) <- rownames(test)
plot.decomp(num.test, label.points = TRUE)
plot.decomp(t(num.test), label.points = TRUE)
plot.decomp(num.test, label.points = TRUE)
log10(1000)
test <- readRDS("~/Documents/Projects/Alzheimers/human/cape_AD/Data/CAPE_Geno.RDS")
str(test)
dimnames(test)[[3]]
dimnames(test[[1]])[[3]]
on19 <- grep("X19", dimnames(test[[1]][[3]]))
on19
on19 <- grep("X19", dimnames(test[[1]])[[3]]
on19 <- grep("X19", dimnames(test[[1]])[[3]])
on19
marker.names <- dimnames(test[[1]])[[3]]
marker.names[on19]
library(qtl2)
page(est_herit)
page(get_common_ids)
library(qtl2)
?scan1perm
?summary
>scan1perm.summary
?scan1perm.summary
?summary.scan1perm
useful.fun <- list.files("~/Documents/git_repositories/useful_r_code", full.names = TRUE)
useful.fun
for(i in 1:length(useful.fun)){source(useful.fun[i])}
a <- seq(-100, 100, 1)
acol <- colors.from.values(a, use.pheatmap.colors = TRUE)
barplot(a, col = acol)
barplot(a, col = acol, border = NA)
abline(h = 0)
a <- rnorm(100)
acol <- colors.from.values(a, use.pheatmap.colors = TRUE)
hist(a)
a <- rnorm(1000)
hist(a)
ahist <- hist(a)
ahist <- hist(a, plot = FALSE)
ahist
acol  <- colors.from.values(ahist$mids)
barplot(ahist$counts, col = acol)
acol  <- colors.from.values(ahist$mids, use.pheatmap.values = TRUE)
acol  <- colors.from.values(ahist$mids, use.pheatmap.colors = TRUE)
barplot(ahist$counts, col = acol)
barplot(ahist$counts, col = acol, breaks = 100)
ahist <- hist(a, plot = FALSE, breaks = 100)
acol  <- colors.from.values(ahist$mids, use.pheatmap.colors = TRUE)
barplot(ahist$counts, col = acol)
barplot(ahist$counts, col = acol, border = NA)
ahist <- hist(a, plot = FALSE, breaks = 25)
acol  <- colors.from.values(ahist$mids, use.pheatmap.colors = TRUE)
barplot(ahist$counts, col = acol)
library(qtl2()
library(qtl2)
?read_cross2
test <- readRDS("~/Documents/Projects/EAE/Data/map.RDS")
str(test)
library(stringr)
?stringr
?flatten
library(stringr)
?trim
?par
test <- readRDS("~/Documents/Projects/Islets/Islet_HDM/Data/DO/Clinical_Phenotypes_V11.RDS")
str(test)
annot <- test$annot_samples
annot
.
annot <- test$annot.samples
annot
head(annot)
annote[,"DeathDate"] - annot[,"Birthdate"]
annot[,"DeathDate"] - annot[,"Birthdate"]
annot[,"DeathDate"] - annot[,"BirthDate"]
annot[,"DeathDate"] - annot[,"BirthDate"]/7
days.old <- annot[,"DeathDate"] - annot[,"BirthDate"]
days.old
as.numeric(days.old)/7
hist(as.numeric(days.old)/7)
?model.matrix
cross <- readRDS("~/Documents/Projects/LPS/LPS_cape/Results/cape_2ET/cross.RDS")
names(cross)
sort(names(cross))
cross$results_path
cross$results_path <- "~/Documents/Projects/LPS/LPS_cape/Results/cape_2ET"
saveRDS(cross, "~/Documents/Projects/LPS/LPS_cape/Results/cape_2ET/cross.RDS")
?par
?table
a <- 2/3
b <- 1.5
a/b
b/a
?legend
library(pheatmap)
?pheatmap
?glmnet
library(glmnet)
?glmnet
?glmnet.predict
?predict.glmnet
test <- readRDS("~/Documents/Projects/Islets/Islet_HDM/Results/DO/Transcriptomes/Transcript_Heritability.RDS")
str(test)
head(test[[1]])
str(test[[1]])
test <- readRDS("~/Documents/Projects/Islets/Islet_HDM/Results/DO/Imputed_Transcriptomes/Distal_Heritability_Adipose.RDS")
str(test)
head(~/Documents/Projects/Islets/Islet_HDM/Results/DO/Imputed_Transcriptomes/Distal_Heritability_Adipose.RDS)
head(test)
test <- readRDS("~/Documents/Projects/Islets/Islet_HDM/Results/DO/Imputed_Transcriptomes/eQTL_Coef_Adipose.RDS")
str(Test)
str(test)
head(test)
?barplot
library(qtl2)
?genoprobpos
??genoprobpos
?legend
?text
library(biomaRt)
??filters
?listEnsembl
?useEnsembl
library(easyPubMet)
library(easyPubMed)
?get_pubmed_ids
test <- readRDS("~/Documents/Projects/Islets/Islet_HDM/Results/DO/Transcriptomes/TWAS_imputed_expr_trait_cor.RDS")
str(test)
str(test[[1]])
head(test[[1]])
dim(test[[1]])
plot(sort(test[[1]][1,]))
#pasted from containerit output#
#
cran.packages <- c("abind", "BiocManager", "bit", "bitops", "bnstruct", "cluster", "corpcor", "DT", "easyPubMed", "ff", "gmm", "gprofiler2", "here", #
	"hexbin", "igraph", "knitr", "Matrix", "minpack.lm", "mvtnorm", "pdftools", "pheatmap", "propagate", "qtl2", "RColorBrewer", "Rcpp", "regress", #
	"RGCCA", "sandwich", "sm", "stringr", "tmvtnorm", "vioplot", "wordcloud", "wordcloud2", "zoo")#
#
bioc.packages <- c("Biobase", "BiocGenerics", "GEOquery", "limma")#
#
cran.line1 <- "R --slave -e 'install.packages("#
cran.line2 <- ',repos="https://cran.rstudio.com/")'#
#
cran.install.lines <- rep(NA, length(cran.packages))#
for(i in 1:length(cran.packages)){#
	cran.install.lines[i] <- paste0(cran.line1,  '"', cran.packages[i], '"', cran.line2, "'")#
}#
#
write.table(cran.install.lines, "~/Desktop/cran_lines.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)#
#
bioc.line1 <- "R --slave -e 'BiocManager:install("#
bioc.line2 <- ")'"#
#
bioc.install.lines <- rep(NA, length(bioc.packages))#
for(i in 1:length(bioc.packages)){#
	bioc.install.lines[i] <- paste0(bioc.line1, '"', bioc.packages[i], '"', bioc.line2)#
}#
#
write.table(bioc.install.lines, "~/Desktop/bioc_lines.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)
#pasted from containerit output#
#
cran.packages <- c("abind", "BiocManager", "bit", "bitops", "bnstruct", "cluster", "corpcor", "DT", "easyPubMed", "ff", "gmm", "gprofiler2", "here", #
	"hexbin", "igraph", "knitr", "Matrix", "minpack.lm", "mvtnorm", "pdftools", "pheatmap", "propagate", "qtl2", "RColorBrewer", "Rcpp", "regress", #
	"RGCCA", "sandwich", "sm", "stringr", "tmvtnorm", "vioplot", "wordcloud", "wordcloud2", "zoo")#
#
bioc.packages <- c("Biobase", "BiocGenerics", "GEOquery", "limma")#
#
cran.line1 <- "R --slave -e 'install.packages("#
cran.line2 <- ',repos="https://cran.rstudio.com/")'#
#
cran.install.lines <- rep(NA, length(cran.packages))#
for(i in 1:length(cran.packages)){#
	cran.install.lines[i] <- paste0(cran.line1,  '"', cran.packages[i], '"', cran.line2, "'")#
}#
#
write.table(cran.install.lines, "~/Desktop/cran_lines.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)#
#
bioc.line1 <- "R --slave -e 'BiocManager::install("#
bioc.line2 <- ")'"#
#
bioc.install.lines <- rep(NA, length(bioc.packages))#
for(i in 1:length(bioc.packages)){#
	bioc.install.lines[i] <- paste0(bioc.line1, '"', bioc.packages[i], '"', bioc.line2)#
}#
#
write.table(bioc.install.lines, "~/Desktop/bioc_lines.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)
test <- read.delim("~/Downloads/mgi.gaf", comment.char = "!")
str(test)
head(test)
test <- read.delim("~/Downloads/mgi.gaf", comment.char = "!", header = FALSE)
head(test)
length(unique(test[,5]))
length(unique(test[,13]))
tail(test)
test[1:100,]
??download_KEGG
.libPaths(c("/Users/atyler/Library/R/arm64/4.3/library", .libPaths()))
??download_KEGG
library("pRoloc")
??goIdToTerm
?pRoloc
??pRoloc
??goterm
q()
library(clusterProfiler)
library(clusterprofiler)
library(cluster_profiler)
library(cluster)
??cluster
library(RGCCA)
citation(RGCCA)
citation("RGCCA")
citation("qtl2")
citation("RGCCA")
citation("fgsea")
citation("easyPubMed")
citation("cluster")
library(cluster)
?pam
?silouhette
?silhouette
citation("gProfiler2")
citation("gprofiler2")
library(shiny)
?textOutput
setwd("~/Documents/git_repositories/cape")
devtools::document()
install.packages("devtools")
devtools::document()
